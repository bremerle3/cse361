
CS:APP Malloc Lab: Grading Sheet for mm-cider.c

Part 1: Compiling the driver

gcc -Wall -O2 -m32   -c -o mdriver.o mdriver.c
mdriver.c: In function ‘remove_range’:
mdriver.c:438:9: warning: variable ‘size’ set but not used [-Wunused-but-set-variable]
     int size;
         ^
gcc -Wall -O2 -m32   -c -o mm.o mm.c
gcc -Wall -O2 -m32   -c -o memlib.o memlib.c
gcc -Wall -O2 -m32   -c -o fsecs.o fsecs.c
gcc -Wall -O2 -m32   -c -o fcyc.o fcyc.c
gcc -Wall -O2 -m32   -c -o clock.o clock.c
gcc -Wall -O2 -m32   -c -o ftimer.o ftimer.c
gcc -Wall -O2 -m32 -o mdriver mdriver.o mm.o memlib.o fsecs.o fcyc.o clock.o ftimer.o


Part 2: Running the driver with the -g autograder option

Team Name:Muy Mallocators
Member 1 :Dan Witherspoon:Daniel.Witherspoon@gmail.com
Member 2 :Leo Bremer:LBremer@wustl.edu
Using default tracefiles in /project/cec/class/cse361_fl14/traces/
Measuring performance with gettimeofday().
ERROR [trace 9, line 7]: mm_realloc did not preserve the data from old block
ERROR [trace 10, line 7]: mm_realloc did not preserve the data from old block

Results for mm malloc:
trace  valid  util     ops      secs  Kops
 0       yes   99%    5694  0.012486   456
 1       yes   99%    5848  0.009776   598
 2       yes   99%    6648  0.018840   353
 3       yes  100%    5380  0.013900   387
 4       yes   66%   14400  0.000280 51355
 5       yes   92%    4800  0.012958   370
 6       yes   92%    4800  0.013611   353
 7       yes   55%   12000  0.136352    88
 8       yes   51%   24000  0.413719    58
 9        no     -       -         -     -
10        no     -       -         -     -
Total            -       -         -     -

Terminated with 2 errors
correct:9
perfidx:0


Part 3: Grade

Correctness:  16  /  20 (correct traces = 9)
Performance:   2  /  35 (performance index = 0)
Style:   -later-  /  10

Subtotal:     18  /  55

Part 4: Handin file mm-cider.c

/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 * 
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>
#include "mm.h"
#include "memlib.h"

//Constants
#define WSIZE 4 // Word and header/footer size in bytes
#define DSIZE 8 // Doubleword size in bytes
#define CHUNKSIZE (1<<12) //Extend heap by this amount in bytes

//Mini Helper Functions
#define MAX(x, y) ((x) > (y)? (x) : (y))
#define PACK(size, alloc) ((size) | (alloc)) //Pack size/alloc bit into a word

#define GET(p) (*(unsigned int *)(p)) // Read word at addr p
#define PUT(p, val) (*(unsigned int *)(p) = (val)) // Write word to addr p

#define GET_SIZE(p)  (GET(p) & ~0x7) // Read size at addr p
#define GET_ALLOC(p) (GET(p) & 0x1) // Read alloc field at addr p

#define HDRP(bp)       ((char *)(bp) - WSIZE) // Given block ptr, find header addr
#define FTRP(bp)       ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE) // Given block ptr, find footer addr

#define NEXT_BLKP(bp)  ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE))) //Given block ptr, find next block addr points at payload
#define PREV_BLKP(bp)  ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE))) //Given block ptr, find prev block addr


/*********************************************************
 * NOTE TO STUDENTS: Before you do anything else, please
 * provide your team information in the following struct.
 ********************************************************/
team_t team = {
    /* Team name */
    "Muy Mallocators",
    /* First member's full name */
    "Dan Witherspoon",
    /* First member's email address */
    "Daniel.Witherspoon@gmail.com",
    /* Second member's full name (leave blank if none) */
    "Leo Bremer",
    /* Second member's email address (leave blank if none) */
    "LBremer@wustl.edu"
};

/* single word (4) or double word (8) alignment */
#define ALIGNMENT 8  //Do not change

/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)


#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))


//Function Prototypes
static void *extend_heap(size_t words);
void mm_free(void *ptr);
void place (void *bp, size_t asize);
static void *coalesce(void *ptr);

//Local Variable Declarations
static char *heap_listp;
 
// mm_init - initialize the malloc package. 
int mm_init(void)
{
  //heap_listp = mem_heap_lo();

  if ((heap_listp = mem_sbrk(4*WSIZE)) == (void *)-1)
      return -1;
  //Initial pointer to first empty spot on heap    
  PUT(heap_listp, 0); //Padding
  PUT(heap_listp + (1*WSIZE), PACK(DSIZE, 1)); //start
  PUT(heap_listp + (2*WSIZE), PACK(DSIZE, 1)); //end
  PUT(heap_listp + (3*WSIZE), PACK(0,1)); //Epilogue
  heap_listp += (2*WSIZE);

  if(extend_heap(CHUNKSIZE/WSIZE) == NULL)
    return -1;
  
  return 0;   
}   

//wrapper for mem_sbrk
static void *extend_heap(size_t words)
{
  char *bp;
  size_t size;
  
  // Allocate even number of words to maintain alignment
  size = (words % 2) ? (words + 1) * WSIZE : words *WSIZE;
  if ((long)(bp = mem_sbrk(size)) == -1)
    return NULL;

  //Init Free block head/foot and epilog header
  PUT(HDRP(bp), PACK(size, 0));
  PUT(FTRP(bp), PACK(size, 0));
  PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1));
    
    //Coalesce if prev block free
    return coalesce(bp);
}

//Find free block size >= asize                    
void * find_fit(size_t asize){
  void *bp;
  for (bp = heap_listp; GET_SIZE(HDRP(bp)) > 0; bp = NEXT_BLKP(bp)){
    if (!GET_ALLOC(HDRP(bp)) && (asize <= GET_SIZE(HDRP(bp)))){
      return bp;
    }
  }
  return NULL; //no fit
}

//Called by mm_alloc, places 
void place (void *bp, size_t asize){
  size_t size = GET_SIZE(HDRP(bp));
  size_t frag = size - asize;

  //internal fragment
  if (frag < 3){
    PUT(HDRP(bp), PACK(size, 1));
    PUT(FTRP(bp), PACK(size, 1));
  }
    
  //external fragment
  else{
    PUT(HDRP(bp), PACK(asize, 1));
    PUT(FTRP(bp), PACK(asize, 1));      
    bp = NEXT_BLKP(bp); //Move pointer to next block
    PUT(HDRP(bp), PACK(frag, 0));
    PUT(FTRP(bp), PACK(frag, 0));
  }
}

// mm_malloc - Allocate a block by incrementing the brk pointer.
// Always allocate a block whose size is a multiple of the alignment.
void *mm_malloc(size_t size)
{
  size_t asize;
  size_t extendsize;
  char *bp;
  
  //Ignore idiots
  if (size <= 0)
    return NULL;
  
  //Adjust blk size to include overheard and alignment reqs
  if (size <= DSIZE)
    asize = 2 * DSIZE;
  else
    asize = DSIZE * ((size + (DSIZE) + (DSIZE-1)) / DSIZE);  //da fuq, doesn't know basic math but should allign
  
  //Search free list for a fit
  if((bp = find_fit(asize)) != NULL){
    place(bp, asize);
    return bp;
  }
  
  //No fit found, request more memory
  extendsize = MAX(asize, CHUNKSIZE);
  if ((bp = extend_heap(extendsize/WSIZE)) == NULL)
    return NULL;
  place(bp, asize);
  return bp;
}

// mm_realloc - Implemented simply in terms of mm_malloc and mm_free
void *mm_realloc(void *ptr, size_t size)
{
  void *oldptr = ptr;
  void *newptr;
  size_t copySize;
  
  newptr = mm_malloc(size);
  if (newptr == NULL)
    return NULL;
  copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);
  if (size < copySize)
    copySize = size;
  memcpy(newptr, oldptr, copySize);
  mm_free(oldptr);
  return newptr;
}

/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void *bp)
{
  size_t size = GET_SIZE(HDRP(bp));
  PUT(HDRP(bp), PACK(size, 0));
  PUT(FTRP(bp), PACK(size, 0));
  coalesce(bp);
}

//Coalesce 2 free blocks into one                         //Add to free list
static void *coalesce(void *bp)
{
  size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp))); 
  size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
  size_t size = GET_SIZE(HDRP(bp));
  
  if(prev_alloc && next_alloc){
    return bp;
  }
  
  else if(prev_alloc && !next_alloc){
    size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
    PUT(HDRP(bp), PACK(size, 0)); //fixed double ref to FTRP
    PUT(FTRP(bp), PACK(size, 0));    
  } 
  
  else if(!prev_alloc && next_alloc){
    size += GET_SIZE(HDRP(PREV_BLKP(bp)));
    PUT(FTRP(bp), PACK(size, 0));
    PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
    bp = PREV_BLKP(bp);
  }
  else {
    size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
    PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
    PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
    bp = PREV_BLKP(bp);
  }
  return bp;
}

