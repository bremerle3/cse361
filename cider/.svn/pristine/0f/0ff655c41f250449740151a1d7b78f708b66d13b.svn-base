/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 * 
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>
#include "mm.h"
#include "memlib.h"

//Constants
#define WSIZE 4 // Word and header/footer size in bytes
#define DSIZE 8 // Doubleword size in bytes
#define ExHeapSize (1<<12) //Extend heap by this amount in bytes

//Mini Helper Functions
#define MAX(x, y) ((x) > (y)? (x) : (y))
#define PACK(size, alloc) ((size) | (alloc)) //Pack size/alloc bit into a word

#define GET(p) (*(unsigned int *)(p)) // Read word at addr p
#define PUT(p, val) (*(unsigned int *)(p) = (val)) // Write word to addr p

#define GET_SIZE(p)  (GET(p) & ~0x7) // Read size at addr p
#define GET_ALLOC(p) (GET(p) & 0x1) // Read alloc field at addr p

#define HDRP(bp)       ((char *)(bp) - WSIZE) // Given block ptr, find header addr
#define FTRP(bp)       ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE) // Given block ptr, find footer addr

#define NEXT_BLKP(bp)  ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE))) //Given block ptr, find next block addr points at payload
#define PREV_BLKP(bp)  ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE))) //Given block ptr, find prev block addr


/*********************************************************
 * NOTE TO STUDENTS: Before you do anything else, please
 * provide your team information in the following struct.
 ********************************************************/
team_t team = {
    /* Team name */
    "Muy Mallocators",
    /* First member's full name */
    "Dan Witherspoon",
    /* First member's email address */
    "Daniel.Witherspoon@gmail.com",
    /* Second member's full name (leave blank if none) */
    "Leo Bremer",
    /* Second member's email address (leave blank if none) */
    "LBremer@wustl.edu"
};

/* single word (4) or double word (8) alignment */
#define ALIGNMENT 8  //Do not change

/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)


#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))


//Function Prototypes
static void *extend_heap(size_t words);
void mm_free(void *ptr);
void place (void *bp, size_t asize);
void fwdPointers(void *ptr);
void moveStart(void *ptr);
static void *coalesce(void *ptr);

//Local Variable Declarations
static char *heapStart;
char *EoL = 0;  
char *freeStart = 0;
char *prevStart = 0;
char *prevFree = 0;
char *nextFree = 0;
 
// mm_init - initialize the malloc package. 
int mm_init(void)
{
  if ((heapStart = mem_sbrk(4*WSIZE)) == (void *)-1)
      return -1;
  //Initial pointer to first empty spot on heap    
  PUT(heapStart, 0); //Padding
  PUT(heapStart + (1*WSIZE), PACK(DSIZE, 1)); //start
  PUT(heapStart + (2*WSIZE), PACK(DSIZE, 1)); //end
  PUT(heapStart + (3*WSIZE), PACK(0,1)); //Epilogue
  heapStart += (2*WSIZE);

  if(extend_heap(ExHeapSize/WSIZE) == NULL)
    return -1;
  
  return 0;   
}   
void moveStart(void *ptr){//puts thing at pointer bp in front of free list

  char *bp = ptr;

  if(freeStart == 0){    //First run
    PUT(bp, EoL);        //puts EoL in forward pointer
    PUT(bp + WSIZE, EoL);//and in backward pointer
  }

  else{
    PUT(bp + WSIZE, EoL);
    PUT(bp, freeStart); //PROBABLE SEG FAULT CAUSE
    prevStart = (char *) GET(bp);
  }
  freeStart = bp;
  prevFree = (char *) GET(bp + WSIZE);
  nextFree = (char *) GET(bp);
}

void fwdPointers(void *ptr){ //removes allocated block at bp from free list

  char *bp = ptr;
  if((((char *) GET(bp)) == EoL) && (((char *) GET(bp + WSIZE)) == EoL)){ //only thing in free list
    freeStart = 0;
  }
  else if(((char *) GET(bp)) == EoL){ //at end of free list
    PUT(GET(bp + WSIZE), GET(bp));
  }
  else if(((char *) GET(bp + WSIZE)) == EoL){ //at start of list
    PUT(GET(bp) + WSIZE, GET(bp + WSIZE));  //check if GET(bp) + WSIZE is legal
  }
  else{ //at middle of list
    PUT(GET(bp) + WSIZE, GET(bp + WSIZE));
    PUT(GET(bp + WSIZE), GET(bp));
  }
}

//wrapper for mem_sbrk
static void *extend_heap(size_t words)
{
  char *bp;
  size_t size;
  
  // Allocate even number of words to maintain alignment
  size = (words % 2) ? (words + 1) * WSIZE : words *WSIZE;
  if ((long)(bp = mem_sbrk(size)) == -1)
    return NULL;

  //Init Free block head/foot and epilog header
  PUT(HDRP(bp), PACK(size, 0));
  PUT(FTRP(bp), PACK(size, 0));
  PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1));

  //Coalesce if prev block free
  return coalesce(bp);
}

//Find free block size >= asize                  
void * find_fit(size_t asize){
  char *bp;
  for (bp = freeStart; ((char *) *bp) != EoL; bp = ((char *) GET(bp))){
    if (asize <= GET_SIZE(HDRP(bp))){
      return bp;
    }
  }
  return NULL; //no fit
}


//Called by mm_alloc, places 
void place (void *bp, size_t asize){
  size_t size = GET_SIZE(HDRP(bp));
  size_t frag = size - asize;

  //internal fragment
  if (frag < 3){
    PUT(HDRP(bp), PACK(size, 1));
    PUT(FTRP(bp), PACK(size, 1));
    fwdPointers(bp); //Reassigns pointers
  }
    
  //external fragment
  else{
    PUT(HDRP(bp), PACK(asize, 1));
    PUT(FTRP(bp), PACK(asize, 1));
    fwdPointers(bp);      
    bp = NEXT_BLKP(bp); //Move pointer to next block
    PUT(HDRP(bp), PACK(frag, 0));
    PUT(FTRP(bp), PACK(frag, 0));
    moveStart(bp);
  }
}

// mm_malloc - Allocate a block by incrementing the brk pointer.
// Always allocate a block whose size is a multiple of the alignment.
void *mm_malloc(size_t size)
{
  size_t asize;
  size_t extendsize;
  char *bp;
  
  //Ignore idiots
  if (size <= 0)
    return NULL;
  
  //Adjust blk size to include overheard and alignment reqs
  if (size <= DSIZE)
    asize = 2 * DSIZE;
  else
    asize = DSIZE * ((size + (DSIZE) + (DSIZE-1)) / DSIZE);  //da fuq, doesn't know basic math but should allign
  
  //Search free list for a fit
  if((bp = find_fit(asize)) != NULL){
    place(bp, asize);
    return bp;
  }
  
  //No fit found, request more memory
  extendsize = MAX(asize, ExHeapSize);
  if ((bp = extend_heap(extendsize/WSIZE)) == NULL)
    return NULL;
  place(bp, asize);
  return bp;
}

// mm_realloc - Implemented simply in terms of mm_malloc and mm_free
void *mm_realloc(void *ptr, size_t size)
{
  void *oldptr = ptr;
  void *newptr;
  size_t copySize;
  
  newptr = mm_malloc(size);
  if (newptr == NULL)
    return NULL;
  copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);
  if (size < copySize)
    copySize = size;
  memcpy(newptr, oldptr, copySize);
  mm_free(oldptr);
  return newptr;
}

/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void *bp)
{
  size_t size = GET_SIZE(HDRP(bp));
  PUT(HDRP(bp), PACK(size, 0));
  PUT(FTRP(bp), PACK(size, 0));
  coalesce(bp);
}

//Coalesce 2 free blocks into one                         //Add to free list
static void *coalesce(void *bp)
{
  size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp))); 
  size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
  size_t size = GET_SIZE(HDRP(bp));
  
  if(prev_alloc && next_alloc){
    moveStart(bp);
    return bp;
  }
  
  else if(prev_alloc && !next_alloc){
    fwdPointers(NEXT_BLKP(bp));
    size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
    PUT(HDRP(bp), PACK(size, 0));
    PUT(FTRP(bp), PACK(size, 0));    
  } 
  
  else if(!prev_alloc && next_alloc){
    fwdPointers(PREV_BLKP(bp));
    size += GET_SIZE(HDRP(PREV_BLKP(bp)));
    PUT(FTRP(bp), PACK(size, 0));
    PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
    bp = PREV_BLKP(bp);
  }
  else {
    fwdPointers(PREV_BLKP(bp));
    size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
    PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
    PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
    bp = PREV_BLKP(bp);
  }
  moveStart(bp);
  return bp;
}

